name: RDP + Tailscale AutoConnect

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      # ---------------------------
      # 1Ô∏è‚É£ Configura√ß√µes principais do RDP
      # ---------------------------
      - name: üñ•Ô∏è Configurar RDP
        shell: pwsh
        run: |
          # Ativar Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force

          # Desativar autentica√ß√£o de n√≠vel de rede
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Liberar firewall para conex√µes RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Reiniciar servi√ßo RDP
          Restart-Service -Name TermService -Force
          Write-Host "‚úÖ RDP habilitado e firewall configurado"

      # ---------------------------
      # 2Ô∏è‚É£ Criar usu√°rio de acesso RDP
      # ---------------------------
      - name: üë§ Criar usu√°rio RDP
        shell: pwsh
        run: |
          $user = "RDP"
          $password = '${{ secrets.RDP_PASSWORD }}'

          if (-not $password) {
            Write-Error "‚ùå ERRO: Nenhuma senha definida em RDP_PASSWORD (secrets)"
            exit 1
          }

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) {
            Write-Host "‚ÑπÔ∏è Usu√°rio RDP j√° existe, redefinindo senha..."
            Set-LocalUser -Name $user -Password $securePass
          } else {
            New-LocalUser -Name $user -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $user
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          }

          Write-Host "‚úÖ Usu√°rio '$user' criado e habilitado para RDP"
          echo "RDP_CREDS=User: $user | Password: $password" >> $env:GITHUB_ENV

      # ---------------------------
      # 3Ô∏è‚É£ Instalar e conectar Tailscale automaticamente (sem login manual)
      # ---------------------------
      - name: üåê Conectar ao Tailscale
        shell: pwsh
        run: |
          Write-Host "üöÄ Instalando Tailscale via winget..."
          winget install --id=Tailscale.Tailscale --accept-package-agreements --accept-source-agreements -h | Out-Null

          $tsPath = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsPath)) {
            throw "‚ùå Falha ao instalar Tailscale"
          }

          $authkey = '${{ secrets.TAILSCALE_AUTH_KEY }}'
          if (-not $authkey) {
            throw "‚ùå ERRO: Nenhuma auth key definida em TAILSCALE_AUTH_KEY (secrets)"
          }

          Write-Host "üîó Conectando ao Tailscale automaticamente..."
          & "$tsPath" up --authkey "$authkey" --hostname "gh-runner-${{ github.run_id }}" --accept-routes --ssh
          
          if ($LASTEXITCODE -ne 0) {
            throw "‚ùå Falha ao conectar ao Tailscale"
          }

          # Capturar IP
          $tsIP = (& "$tsPath" ip -4 | Select-Object -First 1).Trim()
          if (-not $tsIP) {
            throw "‚ùå Nenhum IP Tailscale encontrado"
          }

          Write-Host "‚úÖ Conectado ao Tailscale com IP: $tsIP"
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      # ---------------------------
      # 4Ô∏è‚É£ Testar conex√£o RDP via Tailscale
      # ---------------------------
      - name: üîç Testar acesso RDP
        shell: pwsh
        run: |
          $tsIP = $env:TAILSCALE_IP
          Write-Host "üñß Testando acesso a $tsIP:3389 ..."
          $test = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $test.TcpTestSucceeded) {
            throw "‚ùå Porta RDP 3389 inacess√≠vel via Tailscale"
          }
          Write-Host "‚úÖ Porta RDP 3389 acess√≠vel via Tailscale"

      # ---------------------------
      # 5Ô∏è‚É£ Exibir informa√ß√µes e manter VPS ativa
      # ---------------------------
      - name: üïì VPS Ativa e Informa√ß√µes
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "================== RDP ACCESS =================="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Usu√°rio: RDP"
          Write-Host "Senha: ${{ secrets.RDP_PASSWORD }}"
          Write-Host "================================================"
          Write-Host ""
          Write-Host "üí° Conecte-se via Tailscale + RDP (IP acima)."
          Write-Host "üåê O Tailscale j√° est√° autenticado automaticamente."
          Write-Host "‚ö° VPS ativa at√© cancelamento manual."
          Write-Host ""

          while ($true) {
            Write-Host "[$(Get-Date)] VPS ativa e aguardando conex√£o..."
            Start-Sleep -Seconds 300
          }
