name: VPS Setup

on:
  workflow_dispatch:

jobs:
  setup-vps:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: ‚öôÔ∏è Set up job
        run: Write-Host "Inicializando ambiente Windows..."

      # ---------------------------
      # 1Ô∏è‚É£ Baixar reposit√≥rio
      # ---------------------------
      - name: üì¶ Baixar reposit√≥rio
        uses: actions/checkout@v4

      # ---------------------------
      # 2Ô∏è‚É£ Restaurar backup (opcional)
      # ---------------------------
      - name: üíæ Restaurar backup anterior (√Årea de Trabalho)
        shell: pwsh
        run: |
          $backup = "$env:USERPROFILE\Desktop_Backup"
          $desktop = "$env:USERPROFILE\Desktop"
          if (Test-Path $backup) {
            Write-Host "üîÑ Restaurando backup anterior..."
            Copy-Item -Path "$backup\*" -Destination $desktop -Recurse -Force
          } else {
            Write-Host "‚ÑπÔ∏è Nenhum backup anterior encontrado."
          }

      # ---------------------------
      # 3Ô∏è‚É£ Conectar ao Tailscale
      # ---------------------------
      - name: üîó Conectar ao Tailscale
        shell: pwsh
        run: |
          Write-Host "üöÄ Instalando Tailscale via winget..."
          winget install --id=Tailscale.Tailscale --accept-package-agreements --accept-source-agreements -h | Out-Null

          $tailscalePath = "C:\Program Files\Tailscale\tailscale.exe"
          $authkey = '${{ secrets.TAILSCALE_KEY }}'

          if (-not (Test-Path $tailscalePath)) {
            throw "‚ùå Tailscale n√£o foi instalado corretamente!"
          }

          Write-Host "üîó Conectando ao Tailscale..."
          & "$tailscalePath" up --authkey "$authkey" --hostname "vps-auto" --accept-routes --ssh
          if ($LASTEXITCODE -ne 0) {
            throw "‚ùå Falha ao conectar ao Tailscale"
          }

          Write-Host "‚úÖ Conectado ao Tailscale com sucesso!"
          & "$tailscalePath" ip -4

      # ---------------------------
      # 4Ô∏è‚É£ Definir senha fixa (para RDP)
      # ---------------------------
      - name: üîê Definir senha fixa
        shell: pwsh
        run: |
          $password = ConvertTo-SecureString '${{ secrets.RDP_PASSWORD }}' -AsPlainText -Force
          $username = "runneradmin"
          Set-LocalUser -Name $username -Password $password
          Write-Host "‚úÖ Senha fixa definida para $username"

      # ---------------------------
      # 5Ô∏è‚É£ Mostrar credenciais RDP
      # ---------------------------
      - name: ü™™ Mostrar credenciais RDP
        shell: pwsh
        run: |
          $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -eq "Ethernet" }).IPAddress
          Write-Host "üñ•Ô∏è Use as credenciais abaixo para conectar via RDP:"
          Write-Host "Usu√°rio: runneradmin"
          Write-Host "Senha: ${{ secrets.RDP_PASSWORD }}"
          Write-Host "IP Local: $ip"
          Write-Host "üîó IP Tailscale (recomendado):"
          & "C:\Program Files\Tailscale\tailscale.exe" ip -4

      # ---------------------------
      # 6Ô∏è‚É£ Manter VPS ativa
      # ---------------------------
      - name: ‚ôªÔ∏è Mantendo VPS ativa
        shell: pwsh
        run: |
          Write-Host "‚è≥ Mantendo VPS ativa por tempo indeterminado..."
          while ($true) {
            Start-Sleep -Seconds 60
          }

      # ---------------------------
      # 7Ô∏è‚É£ Fazer backup final da √Årea de Trabalho
      # ---------------------------
      - name: üíæ Fazer backup da √Årea de Trabalho
        if: always()
        shell: pwsh
        run: |
          $backup = "$env:USERPROFILE\Desktop_Backup"
          $desktop = "$env:USERPROFILE\Desktop"
          New-Item -ItemType Directory -Force -Path $backup | Out-Null
          Copy-Item -Path "$desktop\*" -Destination $backup -Recurse -Force
          Write-Host "‚úÖ Backup salvo em $backup"
